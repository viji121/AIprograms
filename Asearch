mport heapq
i
def heuristic(a, b):
    """Calculate the Manhattan distance heuristic."""
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def a_star_search(graph, start, goal):
    """Perform A* search to find the shortest path from start to goal."""
    # Priority queue to store (cost, node)
    open_set = []
    heapq.heappush(open_set, (0, start))
    
    # Dictionaries to store the cost and path
    came_from = {}
    g_score = {start: 0}
    f_score = {start: heuristic(start, goal)}
    
    while open_set:
        current = heapq.heappop(open_set)[1]
        
        if current == goal:
            # Reconstruct the path
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            path.reverse()
            return path
        
        for neighbor, cost in graph[current].items():
            tentative_g_score = g_score[current] + cost
            
            if neighbor not in g_score or tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                f_score[neighbor] = tentative_g_score + heuristic(neighbor, goal)
                heapq.heappush(open_set, (f_score[neighbor], neighbor))
    
    return None  # Return None if no path is found

# Example usage
if __name__ == "__main__":
    # Define the graph as a dictionary
    graph = {
        (0, 0): {(0, 1): 1, (1, 0): 1},
        (0, 1): {(0, 0): 1, (1, 1): 1, (0, 2): 1},
        (0, 2): {(0, 1): 1, (1, 2): 1},
        (1, 0): {(0, 0): 1, (1, 1): 1, (2, 0): 1},
        (1, 1): {(1, 0): 1, (0, 1): 1, (2, 1): 1, (1, 2): 1},
        (1, 2): {(1, 1): 1, (0, 2): 1, (2, 2): 1},
        (2, 0): {(1, 0): 1, (2, 1): 1},
        (2, 1): {(2, 0): 1, (1, 1): 1, (2, 2): 1},
        (2, 2): {(2, 1): 1, (1, 2): 1},
    }
    
    start = (0, 0)
    goal = (2, 2)
    
    path = a_star_search(graph, start, goal)
    print(f"Path from {start} to {goal}: {path}")
