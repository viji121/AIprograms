from itertools import permutations

def is_valid_solution(s1, s2, s3, mapping):
    # Convert the words to their respective integer values using the mapping
    num1 = int(''.join(str(mapping[c]) for c in s1))
    num2 = int(''.join(str(mapping[c]) for c in s2))
    num3 = int(''.join(str(mapping[c]) for c in s3))
    return num1 + num2 == num3

def solve_cryptarithmetic(s1, s2, s3):
    letters = set(s1 + s2 + s3)
    if len(letters) > 10:
        raise ValueError("Too many unique letters for digits 0-9")

    for perm in permutations(range(10), len(letters)):
        mapping = dict(zip(letters, perm))
        
        # Ensure no leading zeros
        if mapping[s1[0]] == 0 or mapping[s2[0]] == 0 or mapping[s3[0]] == 0:
            continue
        
        if is_valid_solution(s1, s2, s3, mapping):
            return {c: mapping[c] for c in letters}

    return None

# Example usage
s1 = "SEND"
s2 = "MORE"
s3 = "MONEY"
solution = solve_cryptarithmetic(s1, s2, s3)

if solution:
    print("Solution found:")
    for k, v in solution.items():
        print(f"{k} = {v}")
else:
    print("No solution found.")
