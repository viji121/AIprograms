from collections import deque

def bfs_tree(graph, start_node):
    visited = set()  # Set to keep track of visited nodes
    queue = deque([start_node])  # Initialize queue with the start node
    parent = {start_node: None}  # Dictionary to store the parent of each node

    while queue:
        current_node = queue.popleft()
        
        if current_node not in visited:
            visited.add(current_node)
            for neighbor in graph[current_node]:
                if neighbor not in visited and neighbor not in parent:
                    queue.append(neighbor)
                    parent[neighbor] = current_node
    
    return parent

def print_tree(parent):
    def print_subtree(node, depth):
        print("  " * depth + str(node))
        children = [child for child, par in parent.items() if par == node]
        for child in children:
            print_subtree(child, depth + 1)
    
    root = [node for node, par in parent.items() if par is None][0]
    print_subtree(root, 0)

# Example usage:
if __name__ == "__main__":
    graph = {
        'A': ['B', 'C'],
        'B': ['A', 'D', 'E'],
        'C': ['A', 'F'],
        'D': ['B'],
        'E': ['B', 'F'],
        'F': ['C', 'E']
    }

    start_node = 'A'
    parent = bfs_tree(graph, start_node)
    print("BFS Tree Structure:")
    print_tree(parent)
